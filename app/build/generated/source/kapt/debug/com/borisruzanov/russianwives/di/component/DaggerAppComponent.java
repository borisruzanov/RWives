// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.borisruzanov.russianwives.di.component;

import com.borisruzanov.russianwives.App;
import com.borisruzanov.russianwives.di.module.AppModule;
import com.borisruzanov.russianwives.mvp.model.interactor.actions.ActionsInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.chatmessage.ChatMessageInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.chats.ChatsInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.coins.CoinsInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.filter.FilterInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.friendprofile.FriendProfileInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.main.MainInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.mustinfo.MustInfoInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.myprofile.MyProfileInteractor;
import com.borisruzanov.russianwives.mvp.model.interactor.search.SearchInteractor;
import com.borisruzanov.russianwives.mvp.ui.actions.ActionsFragment;
import com.borisruzanov.russianwives.mvp.ui.actions.ActionsFragment_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.actions.ActionsPresenter;
import com.borisruzanov.russianwives.mvp.ui.chatmessage.ChatMessageActivity;
import com.borisruzanov.russianwives.mvp.ui.chatmessage.ChatMessageActivity_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.chatmessage.ChatMessagePresenter;
import com.borisruzanov.russianwives.mvp.ui.chats.ChatsFragment;
import com.borisruzanov.russianwives.mvp.ui.chats.ChatsFragment_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.chats.ChatsPresenter;
import com.borisruzanov.russianwives.mvp.ui.filter.FilterDialogFragment;
import com.borisruzanov.russianwives.mvp.ui.filter.FilterDialogFragment_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.filter.FilterDialogPresenter;
import com.borisruzanov.russianwives.mvp.ui.friendprofile.FriendProfileActivity;
import com.borisruzanov.russianwives.mvp.ui.friendprofile.FriendProfileActivity_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.friendprofile.FriendProfilePresenter;
import com.borisruzanov.russianwives.mvp.ui.main.MainActivity;
import com.borisruzanov.russianwives.mvp.ui.main.MainActivity_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.main.MainPresenter;
import com.borisruzanov.russianwives.mvp.ui.mustinfo.MustInfoDialogFragment;
import com.borisruzanov.russianwives.mvp.ui.mustinfo.MustInfoDialogFragment_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.mustinfo.MustInfoDialogPresenter;
import com.borisruzanov.russianwives.mvp.ui.myprofile.MyProfileActivity;
import com.borisruzanov.russianwives.mvp.ui.myprofile.MyProfileActivity_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.myprofile.MyProfilePresenter;
import com.borisruzanov.russianwives.mvp.ui.onlineUsers.OnlineUsersFragment;
import com.borisruzanov.russianwives.mvp.ui.rewardvideo.RewardVideoActivity;
import com.borisruzanov.russianwives.mvp.ui.search.SearchFragment;
import com.borisruzanov.russianwives.mvp.ui.search.SearchFragment_MembersInjector;
import com.borisruzanov.russianwives.mvp.ui.search.SearchPresenter;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.Preconditions;

public final class DaggerAppComponent implements AppComponent {
  private AppModule appModule;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appModule = builder.appModule;
  }

  @Override
  public void inject(App app) {}

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(ActionsFragment actionsFragment) {
    injectActionsFragment(actionsFragment);
  }

  @Override
  public void inject(ChatMessageActivity chatMessageActivity) {
    injectChatMessageActivity(chatMessageActivity);
  }

  @Override
  public void inject(FriendProfileActivity friendProfileActivity) {
    injectFriendProfileActivity(friendProfileActivity);
  }

  @Override
  public void inject(ChatsFragment chatsFragment) {
    injectChatsFragment(chatsFragment);
  }

  @Override
  public void inject(FilterDialogFragment filterDialogFragment) {
    injectFilterDialogFragment(filterDialogFragment);
  }

  @Override
  public void inject(MyProfileActivity myProfileActivity) {
    injectMyProfileActivity(myProfileActivity);
  }

  @Override
  public void inject(SearchFragment searchFragment) {
    injectSearchFragment(searchFragment);
  }

  @Override
  public void inject(OnlineUsersFragment onlineUsersFragment) {}

  @Override
  public void inject(MustInfoDialogFragment mustInfoDialogFragment) {
    injectMustInfoDialogFragment(mustInfoDialogFragment);
  }

  @Override
  public void inject(RewardVideoActivity rewardVideoActivity) {}

  @CanIgnoreReturnValue
  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMPresenter(
        instance,
        new MainPresenter(
            new MainInteractor(
                Preconditions.checkNotNull(
                    appModule.provideUserRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideHotUsersRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideSystemRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private ActionsFragment injectActionsFragment(ActionsFragment instance) {
    ActionsFragment_MembersInjector.injectActionsPresenter(
        instance,
        new ActionsPresenter(
            new ActionsInteractor(
                Preconditions.checkNotNull(
                    appModule.provideUserRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private ChatMessageActivity injectChatMessageActivity(ChatMessageActivity instance) {
    ChatMessageActivity_MembersInjector.injectPresenter(
        instance,
        new ChatMessagePresenter(
            new ChatMessageInteractor(
                Preconditions.checkNotNull(
                    appModule.provideChatMessageRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private FriendProfileActivity injectFriendProfileActivity(FriendProfileActivity instance) {
    FriendProfileActivity_MembersInjector.injectMPresenter(
        instance,
        new FriendProfilePresenter(
            new FriendProfileInteractor(
                Preconditions.checkNotNull(
                    appModule.provideFriendProfileRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideUserRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideRatingRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private ChatsFragment injectChatsFragment(ChatsFragment instance) {
    ChatsFragment_MembersInjector.injectChatsPresenter(
        instance,
        new ChatsPresenter(
            new ChatsInteractor(
                Preconditions.checkNotNull(
                    appModule.provideChatsRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private FilterDialogFragment injectFilterDialogFragment(FilterDialogFragment instance) {
    FilterDialogFragment_MembersInjector.injectPresenter(
        instance,
        new FilterDialogPresenter(
            new FilterInteractor(
                Preconditions.checkNotNull(
                    appModule.filterRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private MyProfileActivity injectMyProfileActivity(MyProfileActivity instance) {
    MyProfileActivity_MembersInjector.injectPresenter(
        instance,
        new MyProfilePresenter(
            new MyProfileInteractor(
                Preconditions.checkNotNull(
                    appModule.provideUserRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    MyProfileActivity_MembersInjector.injectProvideMyProfilePresenter(instance);
    return instance;
  }

  @CanIgnoreReturnValue
  private SearchFragment injectSearchFragment(SearchFragment instance) {
    SearchFragment_MembersInjector.injectSearchPresenter(
        instance,
        new SearchPresenter(
            new SearchInteractor(
                Preconditions.checkNotNull(
                    appModule.provideSearchRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.filterRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideFriendProfileRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideRatingRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideUserRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideHotUsersRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method")),
            new CoinsInteractor(
                Preconditions.checkNotNull(
                    appModule.provideCoinsRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  @CanIgnoreReturnValue
  private MustInfoDialogFragment injectMustInfoDialogFragment(MustInfoDialogFragment instance) {
    MustInfoDialogFragment_MembersInjector.injectPresenter(
        instance,
        new MustInfoDialogPresenter(
            new MustInfoInteractor(
                Preconditions.checkNotNull(
                    appModule.provideSliderRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideUserRepository(
                        Preconditions.checkNotNull(
                            appModule.providePrefsClass(),
                            "Cannot return null from a non-@Nullable @Provides method")),
                    "Cannot return null from a non-@Nullable @Provides method"),
                Preconditions.checkNotNull(
                    appModule.provideRatingRepository(),
                    "Cannot return null from a non-@Nullable @Provides method"))));
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }
}
