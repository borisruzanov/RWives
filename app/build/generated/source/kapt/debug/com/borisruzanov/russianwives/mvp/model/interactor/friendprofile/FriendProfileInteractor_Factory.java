// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.borisruzanov.russianwives.mvp.model.interactor.friendprofile;

import com.borisruzanov.russianwives.mvp.model.repository.friend.FriendRepository;
import com.borisruzanov.russianwives.mvp.model.repository.rating.RatingRepository;
import com.borisruzanov.russianwives.mvp.model.repository.user.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class FriendProfileInteractor_Factory implements Factory<FriendProfileInteractor> {
  private final Provider<FriendRepository> repositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<RatingRepository> ratingRepositoryProvider;

  public FriendProfileInteractor_Factory(
      Provider<FriendRepository> repositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RatingRepository> ratingRepositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.ratingRepositoryProvider = ratingRepositoryProvider;
  }

  @Override
  public FriendProfileInteractor get() {
    return new FriendProfileInteractor(
        repositoryProvider.get(), userRepositoryProvider.get(), ratingRepositoryProvider.get());
  }

  public static Factory<FriendProfileInteractor> create(
      Provider<FriendRepository> repositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RatingRepository> ratingRepositoryProvider) {
    return new FriendProfileInteractor_Factory(
        repositoryProvider, userRepositoryProvider, ratingRepositoryProvider);
  }
}
