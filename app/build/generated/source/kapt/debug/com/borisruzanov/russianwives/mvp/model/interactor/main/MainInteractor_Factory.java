// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.borisruzanov.russianwives.mvp.model.interactor.main;

import com.borisruzanov.russianwives.mvp.model.data.SystemRepository;
import com.borisruzanov.russianwives.mvp.model.repository.hots.HotUsersRepository;
import com.borisruzanov.russianwives.mvp.model.repository.user.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class MainInteractor_Factory implements Factory<MainInteractor> {
  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<HotUsersRepository> hotUsersRepositoryProvider;

  private final Provider<SystemRepository> mSystemRepositoryProvider;

  public MainInteractor_Factory(
      Provider<UserRepository> userRepositoryProvider,
      Provider<HotUsersRepository> hotUsersRepositoryProvider,
      Provider<SystemRepository> mSystemRepositoryProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.hotUsersRepositoryProvider = hotUsersRepositoryProvider;
    this.mSystemRepositoryProvider = mSystemRepositoryProvider;
  }

  @Override
  public MainInteractor get() {
    return new MainInteractor(
        userRepositoryProvider.get(),
        hotUsersRepositoryProvider.get(),
        mSystemRepositoryProvider.get());
  }

  public static Factory<MainInteractor> create(
      Provider<UserRepository> userRepositoryProvider,
      Provider<HotUsersRepository> hotUsersRepositoryProvider,
      Provider<SystemRepository> mSystemRepositoryProvider) {
    return new MainInteractor_Factory(
        userRepositoryProvider, hotUsersRepositoryProvider, mSystemRepositoryProvider);
  }
}
