// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.borisruzanov.russianwives.mvp.model.interactor.search;

import com.borisruzanov.russianwives.mvp.model.repository.filter.FilterRepository;
import com.borisruzanov.russianwives.mvp.model.repository.friend.FriendRepository;
import com.borisruzanov.russianwives.mvp.model.repository.hots.HotUsersRepository;
import com.borisruzanov.russianwives.mvp.model.repository.rating.RatingRepository;
import com.borisruzanov.russianwives.mvp.model.repository.search.SearchRepository;
import com.borisruzanov.russianwives.mvp.model.repository.user.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class SearchInteractor_Factory implements Factory<SearchInteractor> {
  private final Provider<SearchRepository> searchRepositoryProvider;

  private final Provider<FilterRepository> filterRepositoryProvider;

  private final Provider<FriendRepository> friendRepositoryProvider;

  private final Provider<RatingRepository> ratingRepositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<HotUsersRepository> hotsRepositoryProvider;

  public SearchInteractor_Factory(
      Provider<SearchRepository> searchRepositoryProvider,
      Provider<FilterRepository> filterRepositoryProvider,
      Provider<FriendRepository> friendRepositoryProvider,
      Provider<RatingRepository> ratingRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<HotUsersRepository> hotsRepositoryProvider) {
    this.searchRepositoryProvider = searchRepositoryProvider;
    this.filterRepositoryProvider = filterRepositoryProvider;
    this.friendRepositoryProvider = friendRepositoryProvider;
    this.ratingRepositoryProvider = ratingRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.hotsRepositoryProvider = hotsRepositoryProvider;
  }

  @Override
  public SearchInteractor get() {
    return new SearchInteractor(
        searchRepositoryProvider.get(),
        filterRepositoryProvider.get(),
        friendRepositoryProvider.get(),
        ratingRepositoryProvider.get(),
        userRepositoryProvider.get(),
        hotsRepositoryProvider.get());
  }

  public static Factory<SearchInteractor> create(
      Provider<SearchRepository> searchRepositoryProvider,
      Provider<FilterRepository> filterRepositoryProvider,
      Provider<FriendRepository> friendRepositoryProvider,
      Provider<RatingRepository> ratingRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<HotUsersRepository> hotsRepositoryProvider) {
    return new SearchInteractor_Factory(
        searchRepositoryProvider,
        filterRepositoryProvider,
        friendRepositoryProvider,
        ratingRepositoryProvider,
        userRepositoryProvider,
        hotsRepositoryProvider);
  }
}
